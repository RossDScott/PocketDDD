// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PocketDDD.Server.DB;

#nullable disable

namespace PocketDDD.Server.DB.Migrations
{
    [DbContext(typeof(PocketDDDContext))]
    [Migration("20220509194046_UserName")]
    partial class UserName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.EventDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EventDetail");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SpeakerToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventDetailId");

                    b.HasIndex("TimeSlotId");

                    b.HasIndex("TrackId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("To")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EventDetailId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventDetailId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<int>("EventScore")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.UserEventFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("Overall")
                        .HasColumnType("int");

                    b.Property<int?>("Refreshments")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Venue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEventFeedback");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.UserSessionFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EventDetailId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int?>("SpeakerKnowledgeRating")
                        .HasColumnType("int");

                    b.Property<int?>("SpeakerSkillsRating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventDetailId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessionFeedback");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.Session", b =>
                {
                    b.HasOne("PocketDDD.Server.Model.DBModel.EventDetail", "EventDetail")
                        .WithMany("Sessions")
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PocketDDD.Server.Model.DBModel.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PocketDDD.Server.Model.DBModel.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventDetail");

                    b.Navigation("TimeSlot");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.TimeSlot", b =>
                {
                    b.HasOne("PocketDDD.Server.Model.DBModel.EventDetail", "EventDetail")
                        .WithMany("TimeSlots")
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventDetail");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.Track", b =>
                {
                    b.HasOne("PocketDDD.Server.Model.DBModel.EventDetail", "EventDetail")
                        .WithMany("Tracks")
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventDetail");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.UserEventFeedback", b =>
                {
                    b.HasOne("PocketDDD.Server.Model.DBModel.EventDetail", "EventDetail")
                        .WithMany()
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PocketDDD.Server.Model.DBModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.UserSessionFeedback", b =>
                {
                    b.HasOne("PocketDDD.Server.Model.DBModel.EventDetail", "EventDetail")
                        .WithMany()
                        .HasForeignKey("EventDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PocketDDD.Server.Model.DBModel.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PocketDDD.Server.Model.DBModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventDetail");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PocketDDD.Server.Model.DBModel.EventDetail", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("TimeSlots");

                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
