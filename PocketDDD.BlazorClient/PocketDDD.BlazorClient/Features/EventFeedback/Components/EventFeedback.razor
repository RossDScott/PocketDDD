@using PocketDDD.BlazorClient.Features.EventFeedback.Store
@using Microsoft.AspNetCore.Components
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<EventFeedbackState> State
@inject IDispatcher Dispatcher

<MudDialog>
    <TitleContent><MudText Typo="Typo.h6" Align="Align.Center">Event Feedback</MudText></TitleContent>
    <DialogContent>

        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5">Please provide feedback on the event</MudText>
                <MudText Typo="Typo.body2" Class="mt-2">
                    You will get 3 prize draw entries for providing event feedback.<br/>
                    Note: You are welcome to update your feedback, but it won't get you any extra points!
                </MudText>
            </MudCardContent>
        </MudCard>

        <MudCard Class="mt-3">
            <MudCardContent>
                <MudText Typo="Typo.h6">Refreshments:</MudText>
                <MudRating SelectedValue="@_refreshments" SelectedValueChanged="newValue => { _refreshments = newValue; HandleDataChanged();}" />
                
                <MudText Typo="Typo.h6">Venue:</MudText>
                <MudRating SelectedValue="@_venue" SelectedValueChanged="newValue => { _venue = newValue; HandleDataChanged();}" />
                
                <MudText Typo="Typo.h6">Overall:</MudText>
                <MudRating SelectedValue="@_overall" SelectedValueChanged="newValue => { _overall = newValue; HandleDataChanged();}" />

                <MudText Typo="Typo.h6">Comments:</MudText>
                <MudText Typo="Typo.body2">
                    <MudTextField Value="_comments" ValueChanged="(string newText) => { _comments = newText; HandleDataChanged();}"
                        Immediate="true"
                        Variant="Variant.Text"
                        Lines="3">
                    </MudTextField>
                </MudText>
            </MudCardContent>
        </MudCard>
    </DialogContent>
</MudDialog>

<MudAppBar Bottom="true" Fixed="true" Color="Color.Transparent" Elevation="1">
    <MudButton 
        Variant="Variant.Filled"
        Color="Color.Secondary"
        FullWidth="true"
        OnClick="HandleCancel">
        Cancel
    </MudButton>
    <MudButton
        Class="ml-2"
        Variant="Variant.Filled"
        Color="Color.Primary"
        FullWidth="true"
        OnClick="HandleSubmit"
        Disabled="!isDirty">
        Submit
    </MudButton>
</MudAppBar>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    int _refreshments = 0;
    int _venue = 0;
    int _overall = 0;
    string _comments = string.Empty;

    bool isDirty = false;

    protected override void OnInitialized()
    {
        SubscribeToAction<SetEventFeedbackAction>(OnSetExistingFeedback);
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        Dispatcher.Dispatch(new LoadExistingEventFeedbackAction());

        base.OnParametersSet();
    }

    void OnSetExistingFeedback(SetEventFeedbackAction action)
    {
        _refreshments = action.Feedback.Refreshments;
        _venue = action.Feedback.Venue;
        _overall = action.Feedback.Overall;
        _comments = action.Feedback.Comments;
    }

    void HandleDataChanged() => isDirty = true;

    void HandleSubmit()
    {
        var feedback = new Models.EventFeedback
        {
            Refreshments = _refreshments,
            Venue = _venue,
            Overall = _overall,
            Comments = _comments
        };

        Dispatcher.Dispatch(new SubmitEventFeedbackAction(feedback));

        MudDialog.Close(DialogResult.Ok(true));
    }

    void HandleCancel()
    {
        MudDialog.Cancel();
    }
}
