@page "/"
@using PocketDDD.BlazorClient.Features.Login.Components
@using PocketDDD.BlazorClient.Features.Sync.Store;
@using PocketDDD.BlazorClient.Services;
@using PocketDDD.BlazorClient.Features.Home.Store
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IState<HomeState> State
@inject IDispatcher Dispatcher
@inject IDialogService Dialog
@inject LocalStorageService LocalStorage

<MudLayout>
    <MudAppBar>
        <h3>DDDSW 2023</h3>
        <MudSpacer />
        <MudIconButton 
            Icon="@Icons.Material.Filled.TagFaces"
            OnClick="HandleShowEventFeedback" />
    </MudAppBar>
    <MudMainContent>
        @WhenLoadingAndNotFailedShowAlert()
        @WhenLoadingFailedShowCard()
        <EventData></EventData>
    </MudMainContent>
</MudLayout>

@code {
    RenderFragment? WhenLoadingAndNotFailedShowAlert() => State.Value.Loading && !State.Value.FailedToLoad
        ? @<MudAlert Severity="Severity.Info">loading...</MudAlert>
        : null;

    RenderFragment? WhenLoadingFailedShowCard() => State.Value.Loading && State.Value.FailedToLoad
        ? @<MudCard>
            <MudCardContent>
                <MudText><h5>Failed to load data</h5></MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Refresh">Retry</MudButton>
            </MudCardActions>
          </MudCard>
        : null;
}

@code {
    protected override async Task OnInitializedAsync()
    {
        var user = await LocalStorage.GetCurrentUser();

        if(user is null)
            Dialog.Show<Login>("", new DialogOptions { FullScreen = true });

        Dispatcher.Dispatch(new LoadDataAction());
        Dispatcher.Dispatch(new SyncAction());
    }

    void HandleShowEventFeedback()
    {
        
    }
}
